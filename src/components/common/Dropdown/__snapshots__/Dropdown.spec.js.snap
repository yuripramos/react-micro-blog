// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dropdown component should match snapshot with no prop valid 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dropdown
    accountNumber={true}
    label=""
    list={
      Array [
        Object {
          "name": "one",
        },
        Object {
          "name": "two",
        },
      ]
    }
    name="dropdown"
    onChange={[Function]}
    placeholder="Dropdown"
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          isEmpty={true}
          name="dropdown"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Dropdown"
          required={true}
          value=""
        >
          <option
            defaultValue={true}
          >
            
          </option>
          <option>
            one
          </option>
          <option>
            two
          </option>
        </ForwardRef>,
        "",
      ],
      "valid": null,
      "width": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <option
              defaultValue={true}
            >
              
            </option>,
            <option>
              one
            </option>,
            <option>
              two
            </option>,
          ],
          "data-test": undefined,
          "isEmpty": true,
          "name": "dropdown",
          "onBlur": [Function],
          "onChange": [Function],
          "placeholder": "Dropdown",
          "required": true,
          "tinyLabels": undefined,
          "type": undefined,
          "value": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": "",
              "defaultValue": true,
              "value": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": "one",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "one",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": "two",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "two",
            "type": "option",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "rules": Array [
              "
  width: 100%;
  height: ",
              "3rem",
              ";
  border-radius: ",
              "0.25rem",
              ";
  background-color: ",
              "#FFF",
              ";
  border: solid ",
              "0.0625rem",
              " ",
              "#696969",
              ";
  font-family: Lato;
  font-size: ",
              "0.8125rem",
              ";
  letter-spacing: ",
              "0.05rem",
              ";
  color: ",
              "#5b6b75",
              ";
  padding: ",
              "0.9375rem",
              " ",
              "0.9375rem",
              " 0 ",
              "0.4rem",
              ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
              "0.0625rem",
              " ",
              "#4a90e2",
              ";
  }

  ",
              [Function],
              ";
  :not(:focus) {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.select",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "select",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "",
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htoDjs",
        "isStatic": false,
        "rules": Array [
          "
  letter-spacing: ",
          "0.00625rem",
          ";
  display: inline-block;
  position: relative;
  margin: 0 ",
          "0.375rem",
          " ",
          "0.375rem",
          " 0;

  select:not(:focus) {
    ",
          [Function],
          ";
  }

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htoDjs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            isEmpty={true}
            name="dropdown"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="Dropdown"
            required={true}
            value=""
          >
            <option
              defaultValue={true}
            >
              
            </option>
            <option>
              one
            </option>
            <option>
              two
            </option>
          </ForwardRef>,
          "",
        ],
        "valid": null,
        "width": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <option
                defaultValue={true}
              >
                
              </option>,
              <option>
                one
              </option>,
              <option>
                two
              </option>,
            ],
            "data-test": undefined,
            "isEmpty": true,
            "name": "dropdown",
            "onBlur": [Function],
            "onChange": [Function],
            "placeholder": "Dropdown",
            "required": true,
            "tinyLabels": undefined,
            "type": undefined,
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": "",
                "defaultValue": true,
                "value": undefined,
              },
              "ref": null,
              "rendered": "",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": "one",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "one",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "host",
              "props": Object {
                "children": "two",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "two",
              "type": "option",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  width: 100%;
  height: ",
                "3rem",
                ";
  border-radius: ",
                "0.25rem",
                ";
  background-color: ",
                "#FFF",
                ";
  border: solid ",
                "0.0625rem",
                " ",
                "#696969",
                ";
  font-family: Lato;
  font-size: ",
                "0.8125rem",
                ";
  letter-spacing: ",
                "0.05rem",
                ";
  color: ",
                "#5b6b75",
                ";
  padding: ",
                "0.9375rem",
                " ",
                "0.9375rem",
                " 0 ",
                "0.4rem",
                ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
                "0.0625rem",
                " ",
                "#4a90e2",
                ";
  }

  ",
                [Function],
                ";
  :not(:focus) {
    ",
                [Function],
                ";
  }
",
              ],
            },
            "displayName": "styled.select",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "select",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "",
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htoDjs",
          "isStatic": false,
          "rules": Array [
            "
  letter-spacing: ",
            "0.00625rem",
            ";
  display: inline-block;
  position: relative;
  margin: 0 ",
            "0.375rem",
            " ",
            "0.375rem",
            " 0;

  select:not(:focus) {
    ",
            [Function],
            ";
  }

  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htoDjs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Dropdown component should match snapshot with no validation and with accountNumber 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dropdown
    accountNumber={true}
    label="label"
    list={
      Array [
        Object {
          "name": "one",
        },
        Object {
          "name": "two",
        },
      ]
    }
    name="dropdown"
    onChange={[Function]}
    placeholder="Dropdown"
    valid={[Function]}
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          isEmpty={true}
          name="dropdown"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Dropdown"
          required={true}
          value=""
        >
          <option
            defaultValue={true}
          >
            
          </option>
          <option>
            one
          </option>
          <option>
            two
          </option>
        </ForwardRef>,
        <ForwardRef>
          label
        </ForwardRef>,
      ],
      "valid": null,
      "width": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <option
              defaultValue={true}
            >
              
            </option>,
            <option>
              one
            </option>,
            <option>
              two
            </option>,
          ],
          "data-test": undefined,
          "isEmpty": true,
          "name": "dropdown",
          "onBlur": [Function],
          "onChange": [Function],
          "placeholder": "Dropdown",
          "required": true,
          "tinyLabels": undefined,
          "type": undefined,
          "value": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": "",
              "defaultValue": true,
              "value": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": "one",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "one",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": "two",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "two",
            "type": "option",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "rules": Array [
              "
  width: 100%;
  height: ",
              "3rem",
              ";
  border-radius: ",
              "0.25rem",
              ";
  background-color: ",
              "#FFF",
              ";
  border: solid ",
              "0.0625rem",
              " ",
              "#696969",
              ";
  font-family: Lato;
  font-size: ",
              "0.8125rem",
              ";
  letter-spacing: ",
              "0.05rem",
              ";
  color: ",
              "#5b6b75",
              ";
  padding: ",
              "0.9375rem",
              " ",
              "0.9375rem",
              " 0 ",
              "0.4rem",
              ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
              "0.0625rem",
              " ",
              "#4a90e2",
              ";
  }

  ",
              [Function],
              ";
  :not(:focus) {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.select",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "select",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "label",
          "tinyLabels": undefined,
        },
        "ref": null,
        "rendered": "label",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": false,
            "rules": Array [
              "
  position: absolute;
  left: ",
              "3.25rem",
              ";
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  transition: 0.3s top, 0.2s color, 0.3s font-size;
  font-family: Lato;
  font-size: ",
              "0.8125rem",
              ";
  letter-spacing: ",
              "0.00625rem",
              ";
  text-align: left;
  color: ",
              "#5b6b75",
              ";
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htoDjs",
        "isStatic": false,
        "rules": Array [
          "
  letter-spacing: ",
          "0.00625rem",
          ";
  display: inline-block;
  position: relative;
  margin: 0 ",
          "0.375rem",
          " ",
          "0.375rem",
          " 0;

  select:not(:focus) {
    ",
          [Function],
          ";
  }

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htoDjs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            isEmpty={true}
            name="dropdown"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="Dropdown"
            required={true}
            value=""
          >
            <option
              defaultValue={true}
            >
              
            </option>
            <option>
              one
            </option>
            <option>
              two
            </option>
          </ForwardRef>,
          <ForwardRef>
            label
          </ForwardRef>,
        ],
        "valid": null,
        "width": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <option
                defaultValue={true}
              >
                
              </option>,
              <option>
                one
              </option>,
              <option>
                two
              </option>,
            ],
            "data-test": undefined,
            "isEmpty": true,
            "name": "dropdown",
            "onBlur": [Function],
            "onChange": [Function],
            "placeholder": "Dropdown",
            "required": true,
            "tinyLabels": undefined,
            "type": undefined,
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": "",
                "defaultValue": true,
                "value": undefined,
              },
              "ref": null,
              "rendered": "",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": "one",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "one",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "host",
              "props": Object {
                "children": "two",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "two",
              "type": "option",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  width: 100%;
  height: ",
                "3rem",
                ";
  border-radius: ",
                "0.25rem",
                ";
  background-color: ",
                "#FFF",
                ";
  border: solid ",
                "0.0625rem",
                " ",
                "#696969",
                ";
  font-family: Lato;
  font-size: ",
                "0.8125rem",
                ";
  letter-spacing: ",
                "0.05rem",
                ";
  color: ",
                "#5b6b75",
                ";
  padding: ",
                "0.9375rem",
                " ",
                "0.9375rem",
                " 0 ",
                "0.4rem",
                ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
                "0.0625rem",
                " ",
                "#4a90e2",
                ";
  }

  ",
                [Function],
                ";
  :not(:focus) {
    ",
                [Function],
                ";
  }
",
              ],
            },
            "displayName": "styled.select",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "select",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "label",
            "tinyLabels": undefined,
          },
          "ref": null,
          "rendered": "label",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "rules": Array [
                "
  position: absolute;
  left: ",
                "3.25rem",
                ";
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  transition: 0.3s top, 0.2s color, 0.3s font-size;
  font-family: Lato;
  font-size: ",
                "0.8125rem",
                ";
  letter-spacing: ",
                "0.00625rem",
                ";
  text-align: left;
  color: ",
                "#5b6b75",
                ";
  ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.label",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "label",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htoDjs",
          "isStatic": false,
          "rules": Array [
            "
  letter-spacing: ",
            "0.00625rem",
            ";
  display: inline-block;
  position: relative;
  margin: 0 ",
            "0.375rem",
            " ",
            "0.375rem",
            " 0;

  select:not(:focus) {
    ",
            [Function],
            ";
  }

  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htoDjs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Dropdown component should match snapshot with no validation and without accountNumber 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dropdown
    accountNumber={false}
    label="label"
    list={
      Array [
        Object {
          "name": "one",
        },
        Object {
          "name": "two",
        },
      ]
    }
    name="dropdown"
    onChange={[Function]}
    placeholder="Dropdown"
    valid={[Function]}
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          isEmpty={true}
          name="dropdown"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Dropdown"
          required={true}
          value=""
        >
          <option
            defaultValue={true}
          >
            
          </option>
          <option>
            one
          </option>
          <option>
            two
          </option>
        </ForwardRef>,
        <ForwardRef>
          label
        </ForwardRef>,
      ],
      "valid": null,
      "width": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <option
              defaultValue={true}
            >
              
            </option>,
            <option>
              one
            </option>,
            <option>
              two
            </option>,
          ],
          "data-test": undefined,
          "isEmpty": true,
          "name": "dropdown",
          "onBlur": [Function],
          "onChange": [Function],
          "placeholder": "Dropdown",
          "required": true,
          "tinyLabels": undefined,
          "type": undefined,
          "value": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": "",
              "defaultValue": true,
              "value": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": "one",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "one",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": "two",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "two",
            "type": "option",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "rules": Array [
              "
  width: 100%;
  height: ",
              "3rem",
              ";
  border-radius: ",
              "0.25rem",
              ";
  background-color: ",
              "#FFF",
              ";
  border: solid ",
              "0.0625rem",
              " ",
              "#696969",
              ";
  font-family: Lato;
  font-size: ",
              "0.8125rem",
              ";
  letter-spacing: ",
              "0.05rem",
              ";
  color: ",
              "#5b6b75",
              ";
  padding: ",
              "0.9375rem",
              " ",
              "0.9375rem",
              " 0 ",
              "0.4rem",
              ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
              "0.0625rem",
              " ",
              "#4a90e2",
              ";
  }

  ",
              [Function],
              ";
  :not(:focus) {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.select",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "select",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "label",
          "tinyLabels": undefined,
        },
        "ref": null,
        "rendered": "label",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bxivhb",
            "isStatic": false,
            "rules": Array [
              "
  position: absolute;
  left: ",
              "3.25rem",
              ";
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  transition: 0.3s top, 0.2s color, 0.3s font-size;
  font-family: Lato;
  font-size: ",
              "0.8125rem",
              ";
  letter-spacing: ",
              "0.00625rem",
              ";
  text-align: left;
  color: ",
              "#5b6b75",
              ";
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bxivhb",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htoDjs",
        "isStatic": false,
        "rules": Array [
          "
  letter-spacing: ",
          "0.00625rem",
          ";
  display: inline-block;
  position: relative;
  margin: 0 ",
          "0.375rem",
          " ",
          "0.375rem",
          " 0;

  select:not(:focus) {
    ",
          [Function],
          ";
  }

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htoDjs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            isEmpty={true}
            name="dropdown"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="Dropdown"
            required={true}
            value=""
          >
            <option
              defaultValue={true}
            >
              
            </option>
            <option>
              one
            </option>
            <option>
              two
            </option>
          </ForwardRef>,
          <ForwardRef>
            label
          </ForwardRef>,
        ],
        "valid": null,
        "width": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <option
                defaultValue={true}
              >
                
              </option>,
              <option>
                one
              </option>,
              <option>
                two
              </option>,
            ],
            "data-test": undefined,
            "isEmpty": true,
            "name": "dropdown",
            "onBlur": [Function],
            "onChange": [Function],
            "placeholder": "Dropdown",
            "required": true,
            "tinyLabels": undefined,
            "type": undefined,
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": "",
                "defaultValue": true,
                "value": undefined,
              },
              "ref": null,
              "rendered": "",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": "one",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "one",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "host",
              "props": Object {
                "children": "two",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "two",
              "type": "option",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  width: 100%;
  height: ",
                "3rem",
                ";
  border-radius: ",
                "0.25rem",
                ";
  background-color: ",
                "#FFF",
                ";
  border: solid ",
                "0.0625rem",
                " ",
                "#696969",
                ";
  font-family: Lato;
  font-size: ",
                "0.8125rem",
                ";
  letter-spacing: ",
                "0.05rem",
                ";
  color: ",
                "#5b6b75",
                ";
  padding: ",
                "0.9375rem",
                " ",
                "0.9375rem",
                " 0 ",
                "0.4rem",
                ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
                "0.0625rem",
                " ",
                "#4a90e2",
                ";
  }

  ",
                [Function],
                ";
  :not(:focus) {
    ",
                [Function],
                ";
  }
",
              ],
            },
            "displayName": "styled.select",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "select",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "label",
            "tinyLabels": undefined,
          },
          "ref": null,
          "rendered": "label",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "rules": Array [
                "
  position: absolute;
  left: ",
                "3.25rem",
                ";
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  transition: 0.3s top, 0.2s color, 0.3s font-size;
  font-family: Lato;
  font-size: ",
                "0.8125rem",
                ";
  letter-spacing: ",
                "0.00625rem",
                ";
  text-align: left;
  color: ",
                "#5b6b75",
                ";
  ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.label",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "label",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htoDjs",
          "isStatic": false,
          "rules": Array [
            "
  letter-spacing: ",
            "0.00625rem",
            ";
  display: inline-block;
  position: relative;
  margin: 0 ",
            "0.375rem",
            " ",
            "0.375rem",
            " 0;

  select:not(:focus) {
    ",
            [Function],
            ";
  }

  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htoDjs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Dropdown component should match snapshot with prop valid as boolean 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dropdown
    accountNumber={true}
    label=""
    list={
      Array [
        Object {
          "name": "one",
        },
        Object {
          "name": "two",
        },
      ]
    }
    name="dropdown"
    onChange={[Function]}
    placeholder="Dropdown"
    valid={false}
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          isEmpty={true}
          name="dropdown"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Dropdown"
          required={true}
          value=""
        >
          <option
            defaultValue={true}
          >
            
          </option>
          <option>
            one
          </option>
          <option>
            two
          </option>
        </ForwardRef>,
        "",
      ],
      "valid": false,
      "width": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <option
              defaultValue={true}
            >
              
            </option>,
            <option>
              one
            </option>,
            <option>
              two
            </option>,
          ],
          "data-test": undefined,
          "isEmpty": true,
          "name": "dropdown",
          "onBlur": [Function],
          "onChange": [Function],
          "placeholder": "Dropdown",
          "required": true,
          "tinyLabels": undefined,
          "type": undefined,
          "value": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": "",
              "defaultValue": true,
              "value": undefined,
            },
            "ref": null,
            "rendered": "",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": "one",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "one",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": "two",
              "defaultValue": undefined,
              "value": undefined,
            },
            "ref": null,
            "rendered": "two",
            "type": "option",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "rules": Array [
              "
  width: 100%;
  height: ",
              "3rem",
              ";
  border-radius: ",
              "0.25rem",
              ";
  background-color: ",
              "#FFF",
              ";
  border: solid ",
              "0.0625rem",
              " ",
              "#696969",
              ";
  font-family: Lato;
  font-size: ",
              "0.8125rem",
              ";
  letter-spacing: ",
              "0.05rem",
              ";
  color: ",
              "#5b6b75",
              ";
  padding: ",
              "0.9375rem",
              " ",
              "0.9375rem",
              " 0 ",
              "0.4rem",
              ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
              "0.0625rem",
              " ",
              "#4a90e2",
              ";
  }

  ",
              [Function],
              ";
  :not(:focus) {
    ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.select",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "select",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "",
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htoDjs",
        "isStatic": false,
        "rules": Array [
          "
  letter-spacing: ",
          "0.00625rem",
          ";
  display: inline-block;
  position: relative;
  margin: 0 ",
          "0.375rem",
          " ",
          "0.375rem",
          " 0;

  select:not(:focus) {
    ",
          [Function],
          ";
  }

  ",
          [Function],
          ";
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htoDjs",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            isEmpty={true}
            name="dropdown"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="Dropdown"
            required={true}
            value=""
          >
            <option
              defaultValue={true}
            >
              
            </option>
            <option>
              one
            </option>
            <option>
              two
            </option>
          </ForwardRef>,
          "",
        ],
        "valid": false,
        "width": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <option
                defaultValue={true}
              >
                
              </option>,
              <option>
                one
              </option>,
              <option>
                two
              </option>,
            ],
            "data-test": undefined,
            "isEmpty": true,
            "name": "dropdown",
            "onBlur": [Function],
            "onChange": [Function],
            "placeholder": "Dropdown",
            "required": true,
            "tinyLabels": undefined,
            "type": undefined,
            "value": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": "",
                "defaultValue": true,
                "value": undefined,
              },
              "ref": null,
              "rendered": "",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": "one",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "one",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "host",
              "props": Object {
                "children": "two",
                "defaultValue": undefined,
                "value": undefined,
              },
              "ref": null,
              "rendered": "two",
              "type": "option",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  width: 100%;
  height: ",
                "3rem",
                ";
  border-radius: ",
                "0.25rem",
                ";
  background-color: ",
                "#FFF",
                ";
  border: solid ",
                "0.0625rem",
                " ",
                "#696969",
                ";
  font-family: Lato;
  font-size: ",
                "0.8125rem",
                ";
  letter-spacing: ",
                "0.05rem",
                ";
  color: ",
                "#5b6b75",
                ";
  padding: ",
                "0.9375rem",
                " ",
                "0.9375rem",
                " 0 ",
                "0.4rem",
                ";
  transition: 0.3s padding, 0.3s border;
  box-shadow: none;

  ::-ms-clear {
    display: none !important;
  }

  :focus {
    outline: none;
    border: solid ",
                "0.0625rem",
                " ",
                "#4a90e2",
                ";
  }

  ",
                [Function],
                ";
  :not(:focus) {
    ",
                [Function],
                ";
  }
",
              ],
            },
            "displayName": "styled.select",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "select",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "",
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htoDjs",
          "isStatic": false,
          "rules": Array [
            "
  letter-spacing: ",
            "0.00625rem",
            ";
  display: inline-block;
  position: relative;
  margin: 0 ",
            "0.375rem",
            " ",
            "0.375rem",
            " 0;

  select:not(:focus) {
    ",
            [Function],
            ";
  }

  ",
            [Function],
            ";
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htoDjs",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
