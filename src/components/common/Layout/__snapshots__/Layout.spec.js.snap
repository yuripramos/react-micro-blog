// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Layout component should match snapshot with children 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Layout>
    <h1>
      children
    </h1>
  </Layout>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ConnectWrapper />,
        <ForwardRef>
          <h1>
            children
          </h1>
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <h1>
            children
          </h1>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "children",
          },
          "ref": null,
          "rendered": "children",
          "type": "h1",
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-kgoBCf",
            "isStatic": true,
            "rules": Array [
              "
  ",
              "
    @media (min-width: ",
              "47.9375rem",
              ") {
      ",
              "
    min-height: calc(100vh - ",
              "9.375rem",
              ");
  ",
              ";
    }
  ",
              ";
  ",
              "
    @media (min-width: ",
              "62rem",
              ") {
      ",
              "
    min-height: calc(100vh - ",
              "11.25rem",
              ");
  ",
              ";
    }
  ",
              ";
  ",
              "
    @media (min-width: ",
              "73.6875rem",
              ") {
      ",
              "
    min-height: calc(100vh - ",
              "10.8125rem",
              ");
  ",
              ";
    }
  ",
              ";
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-kgoBCf",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ConnectWrapper />,
          <ForwardRef>
            <h1>
              children
            </h1>
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <h1>
              children
            </h1>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "children",
            },
            "ref": null,
            "rendered": "children",
            "type": "h1",
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kgoBCf",
              "isStatic": true,
              "rules": Array [
                "
  ",
                "
    @media (min-width: ",
                "47.9375rem",
                ") {
      ",
                "
    min-height: calc(100vh - ",
                "9.375rem",
                ");
  ",
                ";
    }
  ",
                ";
  ",
                "
    @media (min-width: ",
                "62rem",
                ") {
      ",
                "
    min-height: calc(100vh - ",
                "11.25rem",
                ");
  ",
                ";
    }
  ",
                ";
  ",
                "
    @media (min-width: ",
                "73.6875rem",
                ") {
      ",
                "
    min-height: calc(100vh - ",
                "10.8125rem",
                ");
  ",
                ";
    }
  ",
                ";
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kgoBCf",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
